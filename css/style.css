:root {
  --pri-color: steelblue;
  /* --pri-height: 2em;
  --pri-width: 2em;
  --box-height: 1em; */
  --color-operatorTilesBackground: #e7eccc;
  --color-wrong: rgba(255, 0, 0, 0.15);
  --color-right: rgba(0, 255, 0, 0.2);
  --color-noResult: rgba(230, 230, 230, 1.0);
  --color-highlightDropZone: rgba(255, 255, 255, 1.0);
  --color-textShadow: #446688;
  --color-background: rgba(230, 230, 230, 1);
  --grid-foursRow-outerPadding: 0.05fr;
  --grid-foursRow-dropZone: 1fr;
  --grid-foursRow-four: 0.5fr;
  --grid-foursRow-equals: 0.5fr;
  --grid-foursRow-result: 0.5fr;
  --grid-parensWidth: 1.25fr;
  --grid-factorialWidth: 0.50fr;
  --grid-binaryWidth: 1.00fr;
  --grid-fourWidth: 2.50fr;
  --grid-expWidth: 0.75fr;
  --grid-equalsWidth: 2.50fr;
  --grid-resultWidth: 1.50fr;
}

/* CSS for newDrag Test */

:root {
  --four-width: 1fr;
  --dropZone-width: 5fr;
}

#dropZoneContainer {
  display: grid;
  grid-template-columns: var(--dropZone-width) var(--four-width) var(--dropZone-width) var(--four-width) var(--dropZone-width) var(--four-width) var(--dropZone-width) var(--four-width) var(--dropZone-width);
  grid-template-rows: 1fr;
  flex-direction: row;
  */ flex-wrap: nowrap;
  align-items: center;
  width: 600px;
  height: 70px;
  padding: 2px;
  border: 1px solid black;
  min-height: 0;
  /* NEW */
  min-width: 0;
}

.fourDiv {
  flex-basis: auto;
  height: 100%;
  border: 2px dashed blue;
}

.newDropZone {
  display: flex;
  flex: 0 0 25em;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: center;
  align-items: center;
  /* flex: 1 1 0; */
  height: 70px;
  padding: 0px;
  border: 1px solid black;
}

.newTile {
  height: 50px;
  flex-basis: 30px;
  border: 1px solid black;
  overflow: hidden;
  min-width: 0;
}

#tileContainer {
  margin: 10px;
  padding: 15px;
  background: lightgray;
  border-radius: 10px;
  border: 2px solid #1d1d1d;
  height: 100px;
  width: 720px;
  display: grid;
  grid-gap: 0px 10px;
  grid-template-columns: repeat(7, 1fr);
  grid-template-rows: 1fr;
}

/* ^^^ CSS for newDrag Test ^^^ */

* {
  box-sizing: border-box;
}

@font-face {
  font-family: "Computer Modern";
  src: url('http://mirrors.ctan.org/fonts/cm-unicode/fonts/otf/cmunss.otf');
}

body {
  background: var(--color-background);
}

.disabled {
  pointer-events: none;
}

/* Grid Layout */

.foursRow {
  display: grid;
  grid-gap: 2px 2px;
  grid-template-columns: var(--grid-foursRow-outerPadding) var(--grid-foursRow-dropZone) var(--grid-foursRow-four) var(--grid-foursRow-dropZone) var(--grid-foursRow-four) var(--grid-foursRow-dropZone) var(--grid-foursRow-four) var(--grid-foursRow-dropZone) var(--grid-foursRow-four) var(--grid-foursRow-dropZone) var(--grid-foursRow-equals) var(--grid-foursRow-result) var(--grid-foursRow-outerPadding);
  grid-template-rows: 0.05fr 0.90fr 0.05fr;
  grid-template-areas:
  ". . . . . . . . . . . . ."
  ". dropZone1 four1 dropZone2 four2 dropZone3 four3 dropZone4 four4 dropZone5 equals result ."
  ". . . . . . . . . . . . .";
  overflow: hidden;
  margin: 10px;
  /* padding: 15px; */
  border-radius: 10px;
  border: 2px solid #1d1d1d;
  box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.25);
  transition: background 200ms;
  height: 150px;
  width: 720px;
}

.four1 {
  grid-area: four1;
}

.four2 {
  grid-area: four2;
}

.four3 {
  grid-area: four3;
}

.four4 {
  grid-area: four4;
}

.dropZone1 {
  grid-area: dropZone1;
}

.dropZone2 {
  grid-area: dropZone2;
}

.dropZone3 {
  grid-area: dropZone3;
}

.dropZone4 {
  grid-area: dropZone4;
}

.dropZone5 {
  grid-area: dropZone5;
}

.equalsNotEquals {
  grid-area: equals;
}

.result {
  grid-area: result;
  display: flex;
}

#operatorTiles {
  margin: 10px;
  padding: 15px;
  background: var(--color-operatorTilesBackground);
  border-radius: 10px;
  border: 2px solid #1d1d1d;
  box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.25);
  height: 100px;
  width: 720px;
  display: grid;
  grid-gap: 0px 10px;
  grid-template-columns: calc(0.05*var(--grid-binaryWidth)) var(--grid-binaryWidth) var(--grid-binaryWidth) var(--grid-binaryWidth) var(--grid-parensWidth) var(--grid-parensWidth) var(--grid-expWidth) var(--grid-expWidth) var(--grid-parensWidth);
  grid-template-rows: 0.1fr 0.5fr 1.0fr 0.5fr 0.1fr;
  grid-template-areas: ".    .     .       .      .          .           .    .       .        " ".    .     .       .      parensOpen parensClose .    .       factorial" "plus minus multily divide parensOpen parensClose sqrt squared factorial" ".    .     .       .      parensOpen parensClose .    .       factorial" ".    .     .       .      .          .           .    .       .        ";
}

.plusTileGrid {
  grid-area: plus;
}

.minusTileGrid {
  grid-area: minus;
}

.multiplyTileGrid {
  grid-area: multily;
}

.divideTileGrid {
  grid-area: divide;
}

.parensOpenTileGrid {
  grid-area: parensOpen;
}

.parensCloseTileGrid {
  grid-area: parensClose;
}

.squaredTileGrid {
  grid-area: squared;
}

.sqrtTileGrid {
  grid-area: sqrt;
}

.factorialTileGrid {
  grid-area: factorial;
}

/* ^^^Grid Layout^^^ */

/* Background Images */

.four {
  background: url('../images/four.png') no-repeat center center;
  background-size: contain;
}

.fourNeg {
  background: url('../images/fourNeg.png') no-repeat center center;
  background-size: contain;
}

.plus {
  background: url('../images/plus.png') no-repeat center center;
  background-size: contain;
}

.minus {
  background: url('../images/minus.png') no-repeat center center;
  background-size: contain;
}

.multiply {
  background: url('../images/multiply.png') no-repeat center center;
  background-size: contain;
}

.divide {
  background: url('../images/divide.png') no-repeat center center;
  background-size: contain;
}

.parensOpen {
  background: url('../images/parensOpen.png') no-repeat center center;
  background-size: contain;
}

.parensClose {
  background: url('../images/parensClose.png') no-repeat center center;
  background-size: contain;
}

.squared {
  background: url('../images/squared.png') no-repeat center center;
  background-size: contain;
}

.sqrt {
  background: url('../images/sqrt.png') no-repeat center center;
  background-size: contain;
}

.factorial {
  background: url('../images/factorial.png') no-repeat center center;
  background-size: contain;
}

.equals {
  background: url('../images/equals.png') no-repeat center center;
  background-size: contain;
}

.equalsNot {
  background: url('../images/equalsNot.png') no-repeat center center;
  background-size: contain;
}

.zero {
  background: url('../images/zero.png') no-repeat center center;
  background-size: contain;
}
.one {
  background: url('../images/one.png') no-repeat center center;
  background-size: contain;
}
.two {
  background: url('../images/two.png') no-repeat center center;
  background-size: contain;
}
.three {
  background: url('../images/three.png') no-repeat center center;
  background-size: contain;
}
.four {
  background: url('../images/four.png') no-repeat center center;
  background-size: contain;
}
.five {
  background: url('../images/five.png') no-repeat center center;
  background-size: contain;
}
.six {
  background: url('../images/six.png') no-repeat center center;
  background-size: contain;
}
.seven {
  background: url('../images/seven.png') no-repeat center center;
  background-size: contain;
}
.eight {
  background: url('../images/eight.png') no-repeat center center;
  background-size: contain;
}
.nine {
  background: url('../images/nine.png') no-repeat center center;
  background-size: contain;
}
/* Sizing */

.gameContainer {
  max-width: 720px;
}

.resultDigit {
  flex: 1 1 auto;
}
/*       */

div {
  -webkit-animation-iteration-count: 1;
  animation-iteration-count: 1;
}

#textFour {
  font-family: 'Playfair Display SC', serif;
  text-shadow: 1px 0px 0px var(--color-textShadow), 0px 1px 0px var(--color-textShadow), 2px 1px 0px var(--color-textShadow), 1px 2px 0px var(--color-textShadow), 3px 2px 0px var(--color-textShadow), 2px 3px 0px var(--color-textShadow), 4px 3px 0px var(--color-textShadow), 3px 4px 0px var(--color-textShadow);
}

#textFours {
  font-family: 'Dancing Script', cursive;
  /* text-shadow: 2px 2px 2px #ff0000, 4px 4px 4px #00ff00; */
  text-shadow: 1px 0px 0px var(--color-textShadow), 0px 1px 0px var(--color-textShadow), 2px 1px 0px var(--color-textShadow), 1px 2px 0px var(--color-textShadow), 3px 2px 0px var(--color-textShadow), 2px 3px 0px var(--color-textShadow), 4px 3px 0px var(--color-textShadow), 3px 4px 0px var(--color-textShadow);
}

#textFours::before {
  /* content: attr(data-content); */
  font-family: 'Pacifico', cursive;
  /* text-shadow: 2px 2px 2px #ff0000, 4px 4px 4px #00ff00; */
  position: fixed;
  left: -1px;
  top: -1px;
  /* font-family: 'Roboto', sans-serif; */
}

.banner {
  /* height: 20'style.css'
vh; */
  background: skyblue;
  /* background: radial-gradient(skyblue, var(--color-background)); */
  text-align: center;
}

#instructions, .lead {
  font-family: 'Lato', sans-serif;
}

#operatorTiles, .foursRow {
  font-family: 'Markazi Text', serif;
  font-size: 30px;
}

.rightResult {
  background: var(--color-right);
}

.tada {
  animation: tada_3317 1s linear 1;
  transform-origin: 50% 50%;
}

@keyframes tada_3317 {
  0% {
    transform: scale(1)
  }
  5.55556% {
    transform: scale(.95) rotate(-6deg)
  }
  11.11111% {
    transform: scale(.95) rotate(-6deg)
  }
  16.66667% {
    transform: scale(1.05) rotate(6deg)
  }
  22.22222% {
    transform: scale(1.05) rotate(-6deg)
  }
  27.77778% {
    transform: scale(1.05) rotate(6deg)
  }
  33.33333% {
    transform: scale(1.05) rotate(-6deg)
  }
  38.88889% {
    transform: scale(1.05) rotate(6deg)
  }
  44.44444% {
    transform: scale(1) rotate(0)
  }
  100% {
    transform: scale(1) rotate(0)
  }
}

.horizontal {
  animation: horizontal_6114 1s ease 1;
  transform-origin: 50% 50%;
}

@keyframes horizontal_6114 {
  0% {
    transform: translate(0, 0)
  }
  4.41177% {
    transform: translate(5px, 0)
  }
  8.82353% {
    transform: translate(0, 0)
  }
  13.23529% {
    transform: translate(5px, 0)
  }
  17.64706% {
    transform: translate(0, 0)
  }
  22.05882% {
    transform: translate(5px, 0)
  }
  26.47059% {
    transform: translate(0, 0)
  }
  100% {
    transform: translate(0, 0)
  }
}

.wrongResult {
  background: var(--color-wrong);
}

.noResult {
  background: var(--color-noResult);
}

/* .foursRow div {
  margin-right: calc(0.1*var(--pri-width));
} */

.staticSymbol {
  color: var(--pri-color);
  /* font-size: calc(0.7*var(--pri-height));
  height: var(--pri-height);
  width: var(--pri-width); */
  text-align: center;
  /* position: relative; */
  /* margin: 0.1em; */
  /* border: 1px solid black; */
}

/* .staticSymbol p {
  margin: 0;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: calc(var(--pri-height));
} */

.over {
  border: 1px dashed black !important;
  transform: scale(1.1);
  background: var(--color-highlightDropZone);
}

.dropZone {
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: center;
  align-items: center;
  border: 1px dashed #abc;
  border-radius: 10px;
  transition: transform 200ms;

}

.draggable {
  border: 2px solid #1d1d1d;
  border-radius: 5px;
  box-shadow: 2px 3px 5px rgba(0, 0, 0, 0.25);
  opacity: 1.0;
  transition: transform 200ms, box-shadow 200ms;
  flex-basis: 20px;
  overflow: hidden;
  min-width: 0;
}

.draggable:hover {
  transform: scale(1.1);
  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25);
}

.duringDrag {
  border: 1px dotted #1d1d1d;
  box-shadow: 0.5px 0.5px 0.5px gray;
  opacity: 0.4;
}

.droppedTile {
  border: 1px none rgba(10, 10, 10, 0.4);
  height: 100%;
  flex: 1 1 auto;
  overflow: hidden;
  max-width: 40%;
  /* testing bulging as new tile dragged over */
  position: relative;

}

/* .droppedTileBeingDraggedOver {
  top: -10px;
} */

/* .droppedTileBeingDraggedOver::before {
  display: flex;
  content: 'before';
  /* opacity: 1; */
} */

.dropZone, .draggable {
  /* font-family: "Times New Roman", Times, serif; */
  /* font-family: Arial, Helvetica, sans-serif; */
  font-weight: bold;
  text-align: center;
}

[draggable] {
  -moz-user-select: none;
  -khtml-user-select: none;
  -webkit-user-select: none;
  user-select: none;
  /* Required to make elements draggable in old WebKit */
  -khtml-user-drag: element;
  -webkit-user-drag: element;
}

/*
footer {
  position: sticky bottom:0;
  width: 100%;
  height: 160px;
  background: #6cf;
} */
