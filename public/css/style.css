:root {
  --pri-color: steelblue;
  /* --pri-height: 2em;
  --pri-width: 2em;
  --box-height: 1em; */
  --color-operatorTilesBackground: #e7eccc;
  --color-wrong: rgba(255, 0, 0, 0.15);
  --color-right: rgba(0, 255, 0, 0.2);
  --color-noResult: rgba(230, 230, 230, 1.0);
  --color-highlightDropZone: rgba(255, 255, 255, 1.0);
  --color-textShadow: #446688;
  --color-background: rgba(230, 230, 230, 1);

  --grid-parensWidth: 1.25fr;
  --grid-binaryWidth: 1.00fr;
  --grid-fourWidth: 2.50fr;
  --grid-expWidth: 0.75fr;
  --grid-equalsWidth: 2.50fr;
  --grid-resultWidth: 1.50fr;
  --grid-scalar: 0.05;
}

* {
  box-sizing: border-box;
}

@font-face {
  font-family: "Computer Modern";
  src: url('http://mirrors.ctan.org/fonts/cm-unicode/fonts/otf/cmunss.otf');
}

body {
  background: var(--color-background);
}

.disabled {
  pointer-events: none;
}

/* Grid Layout */

.foursRow {
  margin: 10px;
  padding: 15px;
  border-radius: 10px;
  border: 2px solid #1d1d1d;
  box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.25);
  transition: background 200ms;
  height: 150px;
  width: 720px;
  display: grid;
  grid-gap: 2px 2px;
  grid-template-columns: var(--grid-parensWidth) var(--grid-fourWidth) var(--grid-expWidth) var(--grid-binaryWidth) var(--grid-parensWidth) var(--grid-fourWidth) var(--grid-expWidth) var(--grid-parensWidth) var(--grid-binaryWidth) var(--grid-parensWidth) var(--grid-fourWidth) var(--grid-expWidth) var(--grid-parensWidth) var(--grid-binaryWidth) var(--grid-fourWidth) var(--grid-expWidth) var(--grid-parensWidth) var(--grid-equalsWidth) var(--grid-resultWidth);
  grid-template-rows: 0.05fr 0.075fr 0.25fr 0.10fr 1fr 0.05fr 0.075fr;
  grid-template-areas:
  ".  .     e1 .  .  .     e2 .  .  .  .     e3 .  .  .     e4 .  .      .     "
  "p1 .     e1 .  p2 .     e2 p3 .  p4 .     e3 p5 .  .     e4 p6 .      .     "
  "p1 four1 e1 .  p2 four2 e2 p3 .  p4 four3 e3 p5 .  four4 e4 p6 .      result"
  "p1 four1 .  .  p2 four2 .  p3 .  p4 four3 .  p5 .  four4 .  p6 .      result"
  "p1 four1 .  b1 p2 four2 .  p3 b2 p4 four3 .  p5 b3 four4 .  p6 equals result"
  "p1 four1 .  .  p2 four2 .  p3 .  p4 four3 .  p5 .  four4 .  p6 .      result"
  "p1 .     .  .  p2 .     .  p3 .  p4 .     .  p5 .  .     .  p6 .      .     ";
}

.four2 {
  grid-area: four2;
}

.four1 {
  grid-area: four1;
}

.e2 {
  grid-area: e2;
}

.e1 {
  grid-area: e1;
}

.b2 {
  grid-area: b2;
}

.b1 {
  grid-area: b1;
}

.four3 {
  grid-area: four3;
}

.p1 {
  grid-area: p1;
}

.p2 {
  grid-area: p2;
}

.p3 {
  grid-area: p3;
}

.p4 {
  grid-area: p4;
}

.e3 {
  grid-area: e3;
}

.p5 {
  grid-area: p5;
}

.b3 {
  grid-area: b3;
}

.four4 {
  grid-area: four4;
}

.e4 {
  grid-area: e4;
}

.p6 {
  grid-area: p6;
}

.result {
  grid-area: result;
}

.equals {
  grid-area: equals;
}

#operatorTiles {
  margin: 10px;
  padding: 15px;
  background: var(--color-operatorTilesBackground);
  border-radius: 10px;
  border: 2px solid #1d1d1d;
  box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.25);
  height: 100px;
  width: 720px;
  display: grid;
  grid-gap: 0px 10px;
  grid-template-columns: calc(0.05*var(--grid-binaryWidth)) var(--grid-binaryWidth) var(--grid-binaryWidth) var(--grid-binaryWidth) var(--grid-parensWidth) var(--grid-parensWidth) var(--grid-expWidth) var(--grid-expWidth);
  grid-template-rows: 0.1fr 0.5fr 1.0fr 0.5fr 0.1fr;
  grid-template-areas:
  ".    .     .       .      .          .           .    .      "
  ".    .     .       .      parensOpen parensClose .    .      "
  "plus minus multily divide parensOpen parensClose sqrt squared"
  ".    .     .       .      parensOpen parensClose .    .      "
  ".    .     .       .      .          .           .    .      ";
}

.plusTileGrid {
  grid-area: plus;
}

.minusTileGrid {
  grid-area: minus;
}

.multiplyTileGrid {
  grid-area: multily;
}

.divideTileGrid {
  grid-area: divide;
}

.parensOpenTileGrid {
  grid-area: parensOpen;
}

.parensCloseTileGrid {
  grid-area: parensClose;
}

.squaredTileGrid {
  grid-area: squared;
}

.sqrtTileGrid {
  grid-area: sqrt;
}

/* ^^^Grid Layout^^^ */

/* Background Images */

.four {
  background: url('/images/four.png') no-repeat center center;
  background-size: contain;
}

.fourNeg {
  background: url('/images/fourNeg.png') no-repeat center center;
  background-size: contain;
}

.plus {
  background: url('/images/plus.png') no-repeat center center;
  background-size: contain;
}

.minus {
  background: url('/images/minus.png') no-repeat center center;
  background-size: contain;
}

.multiply {
  background: url('/images/multiply.png') no-repeat center center;
  background-size: contain;
}

.divide {
  background: url('/images/divide.png') no-repeat center center;
  background-size: contain;
}

.parensOpen {
  background: url('/images/parensOpen.png') no-repeat center center;
  background-size: contain;
}

.parensClose {
  background: url('/images/parensClose.png') no-repeat center center;
  background-size: contain;
}

.squared {
  background: url('/images/squared.png') no-repeat center center;
  background-size: contain;
}

.sqrt {
  background: url('/images/sqrt.png') no-repeat center center;
  background-size: contain;
}

.equals {
  background: url('/images/equals.png') no-repeat center center;
  background-size: contain;
}

/* Sizing */

.gameContainer {
  max-width: 720px;
}

/*       */

div {
  -webkit-animation-iteration-count: 1;
  animation-iteration-count: 1;
}

#textFour {
  font-family: 'Playfair Display SC', serif;
  text-shadow: 1px 0px 0px var(--color-textShadow), 0px 1px 0px var(--color-textShadow), 2px 1px 0px var(--color-textShadow), 1px 2px 0px var(--color-textShadow), 3px 2px 0px var(--color-textShadow), 2px 3px 0px var(--color-textShadow), 4px 3px 0px var(--color-textShadow), 3px 4px 0px var(--color-textShadow);
}

#textFours {
  font-family: 'Dancing Script', cursive;
  /* text-shadow: 2px 2px 2px #ff0000, 4px 4px 4px #00ff00; */
  text-shadow: 1px 0px 0px var(--color-textShadow), 0px 1px 0px var(--color-textShadow), 2px 1px 0px var(--color-textShadow), 1px 2px 0px var(--color-textShadow), 3px 2px 0px var(--color-textShadow), 2px 3px 0px var(--color-textShadow), 4px 3px 0px var(--color-textShadow), 3px 4px 0px var(--color-textShadow);
}

#textFours::before {
  /* content: attr(data-content); */
  font-family: 'Pacifico', cursive;
  /* text-shadow: 2px 2px 2px #ff0000, 4px 4px 4px #00ff00; */
  position: fixed;
  left: -1px;
  top: -1px;
  /* font-family: 'Roboto', sans-serif; */
}

.banner {
  /* height: 25vh; */
  background: skyblue;
  /* background: radial-gradient(skyblue, var(--color-background)); */
  text-align: center;
}

#instructions, .lead {
  font-family: 'Lato', sans-serif;
}

#operatorTiles, .foursRow {
  font-family: 'Markazi Text', serif;
  font-size: 30px;
}

.rightResult {
  background: var(--color-right);
}

.tada {
  animation: tada_3317 1s linear 1;
  transform-origin: 50% 50%;
}

@keyframes tada_3317 {
  0% {
    transform: scale(1)
  }
  5.55556% {
    transform: scale(.95) rotate(-6deg)
  }
  11.11111% {
    transform: scale(.95) rotate(-6deg)
  }
  16.66667% {
    transform: scale(1.05) rotate(6deg)
  }
  22.22222% {
    transform: scale(1.05) rotate(-6deg)
  }
  27.77778% {
    transform: scale(1.05) rotate(6deg)
  }
  33.33333% {
    transform: scale(1.05) rotate(-6deg)
  }
  38.88889% {
    transform: scale(1.05) rotate(6deg)
  }
  44.44444% {
    transform: scale(1) rotate(0)
  }
  100% {
    transform: scale(1) rotate(0)
  }
}

.horizontal {
  animation: horizontal_6114 1s ease 1;
  transform-origin: 50% 50%;
}

@keyframes horizontal_6114 {
  0% {
    transform: translate(0, 0)
  }
  4.41177% {
    transform: translate(5px, 0)
  }
  8.82353% {
    transform: translate(0, 0)
  }
  13.23529% {
    transform: translate(5px, 0)
  }
  17.64706% {
    transform: translate(0, 0)
  }
  22.05882% {
    transform: translate(5px, 0)
  }
  26.47059% {
    transform: translate(0, 0)
  }
  100% {
    transform: translate(0, 0)
  }
}

.wrongResult {
  background: var(--color-wrong);
}

.noResult {
  background: var(--color-noResult);
}



/* .foursRow div {
  margin-right: calc(0.1*var(--pri-width));
} */

.staticSymbol {
  color: var(--pri-color);
  /* font-size: calc(0.7*var(--pri-height));
  height: var(--pri-height);
  width: var(--pri-width); */
  text-align: center;
  /* position: relative; */
  /* margin: 0.1em; */
  /* border: 1px solid black; */
}

/* .staticSymbol p {
  margin: 0;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: calc(var(--pri-height));
} */

.over {
  border: 1px dashed black !important;
  transform: scale(1.1);
  background: var(--color-highlightDropZone);
}

.dropZone {
  border: 1px dashed #abc;
  transition: transform 200ms;
}

.draggable {
  border: 2px solid #1d1d1d;
  box-shadow: 2px 3px 5px rgba(0, 0, 0, 0.25);
  opacity: 1.0;
  transition: transform 200ms, box-shadow 200ms;
}

.draggable:hover {
  transform: scale(1.1);
  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25);
}

.duringDrag {
  border: 1px dotted #1d1d1d;
  box-shadow: 0.5px 0.5px 0.5px gray;
  opacity: 0.4;
}

.dropped {
  border: 1px none rgba(10, 10, 10, 0.4);
}

.dropZone, .draggable {
  /* font-family: "Times New Roman", Times, serif; */
  /* font-family: Arial, Helvetica, sans-serif; */
  font-weight: bold;
  text-align: center;
}


[draggable] {
  -moz-user-select: none;
  -khtml-user-select: none;
  -webkit-user-select: none;
  user-select: none;
  /* Required to make elements draggable in old WebKit */
  -khtml-user-drag: element;
  -webkit-user-drag: element;
}

/*
footer {
  position: sticky bottom:0;
  width: 100%;
  height: 160px;
  background: #6cf;
} */
